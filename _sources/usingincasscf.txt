Using in CASSCF
***************
.. _interfacing-with-pyscf:

Interfacing with PySCF
----------------------
SHCI can also be used as an FCI solver in CASSCF calculation with a large number of active space orbitals and electrons. If `PySCF <https://github.com/sunqm/pyscf/blob/master/README.md>`_ is successfully installed (see `Installing PySCF <https://github.com/sunqm/pyscf/blob/master/README.md#installation>`_), you can call Dice from within a python input script. After you compile Dice, you must edit the two path variables shown below in the settings.py file in the shciscf module directory in PySCF.

.. code-block:: bash

	SHCIEXE = '/path_to/SHCI/SHCI'
	SHCIQDPTEXE = '/path_to/SHCI/QDPTSOC'


Once this is completed you can run call SHCI from within `PySCF <https://github.com/sunqm/pyscf/blob/master/README.md>`_. An example input is shown below:

.. code-block:: python

	from pyscf import gto, scf
	from pyscf.future.shciscf import shci


	# Initialize O2 molecule
	b =  1.243
	mol = gto.Mole()
	mol.build(
	verbose = 5,
	output = None,
	atom = [
	    ['C',(  0.000000,  0.000000, -b/2)],
	    ['C',(  0.000000,  0.000000,  b/2)], ],
	basis = {'C': 'ccpvdz', },
	symmetry = True,
	symmetry_subgroup = 'D2h',
	spin = 0
	)

	# Create HF molecule
	mf = scf.RHF( mol )
	mf.conv_tol = 1e-9
	mf.scf()

	# Number of orbital and electrons
	norb = 26
	nelec = 8

	# Create SHCI molecule for just variational opt.
	# Active spaces chosen to reflect valence active space.
	mch = shci.SHCISCF( mf, norb, nelec )
	mch.fcisolver.mpiprefix = 'mpirun -np 2'
	mch.fcisolver.stochastic = True
	mch.fcisolver.nPTiter = 0
	mch.fcisolver.sweep_iter = [ 0, 3 ]
	mch.fcisolver.DoRDM = True
	mch.fcisolver.sweep_epsilon = [ 5e-3, 1e-3 ]
	e_shci = mch.mc1step()[0]

After creating our SHCISCF object called mch, we can change the settings used in *Dice* by modifying the attributes of mch.fcisolver *not* mch. The mch object is a general CASSCF object with the fcisolver set to SHCI. The attributes of the fcisolver are nearly identical to those in *Dice* with several additional properties discussed in more detail below.

This script can be executed in the command line as follows:

.. code-block:: bash

	python test_c2.py

Attributes of SHCISCF Objects
-----------------------------

The keywords that are identical to those in *Dice* are described in detail on the :ref:`dice-keywords` page. Shown below are their default values in when using SHISCF objects.

PySCF CASSCF Keywords
+++++++++++++++++++++

* irrep_nelec: dict
	Default is none. This dictionary specifies the number of electrons in the active space orbitals by symmetry type. As a result, users can modify this irrep_nelec to control the symmetry of the wavefunction they wish to optimize. For example, setting irrep_nelec = {'Ag': (25,24), 'B3u': (19,19), 'B2u': (19,19), 'B1g': (15,14), 'B1u': (7,7), 'B2g': (4,3), 'B3g': (4,3),'Au': (2,2)} will give an overall symmetry of :math:`^5A_{1g}`. This property can also be set for the HF object mf and for a more detailed description see `this example <https://github.com/sunqm/pyscf/blob/master/examples/scf/13-symmetry.py>`_.

* orbsym: [int]
	Default is none. This list of integers allows you to specify the symmetry of the orbitals in the active space.
* groupname : str
	Default is none. groupname, orbsym together can control whether to employ symmetry in the calculation.  "groupname = None and orbsym = [ ]" requires the SHCI program using C1 symmetry.
* useExtraSymm : boolean
	Default is False. if the symmetry of the molecule is Dooh or Cooh, then this keyword uses complex orbitals to make full use of this symmetry


*Dice* keywords
+++++++++++++++

* davidsonTol = 5.e-5
* epsilon2 = 1.e-7
* epsilon2Large = 1000
* sampleN = 200
* onlyperturbative = False
* fullrestart = False
* dE = 1.e-8
* eps = None
* prefix = "."
* stochastic = True
* nblocks = 1
* excitation = 1000
* nvirt = 1e6
* singleList = True
* io = True
* nroots = 1
* nPTiter = 0
* DoRDM = True
* sweep_iter =[ ]
* sweep_epsilon = [ ]
* maxIter = 6
* restart = False
